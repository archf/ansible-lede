#!/bin/sh

# OpenWrt-doc: https://openwrt.org/inbox/uci?s[]=uci
# ansible doc: http://docs.ansible.com/ansible/latest/dev_guide/developing_program_flow_modules.html

# A non-native module accepts a filename as its only command line parameter.
# We're going the old style way (the file contains the module args stored in
# key=value pairs)

# todo: support _ansible_check_mode=True

_uci () {
  uci "$@"
  rc=$?
  stdout_lines=$(uci changes)
}

source "${1}"

if [ -z "${command}" ]; then
  echo -n "{\"failed\": true, \"msg\": \"Module needs command=argument\"}"
  exit 1
fi

if [ "${command}" != "batch" ] && [ -z "${key}" ]; then
  echo -n "{\"failed\": true \"msg\": \"Module needs key=argument\"}"
  exit 1
fi

if [ -z "${value}" ]; then
  echo -n "{\"failed\": true, \"msg\": \"Module needs value=argument\"}"
  exit 1
fi

case "${command}" in
    # This is preferred and most efficient mode.
    batch)
      echo "${value}" | uci batch
      # echo ${value} | sed 's/^/set /')
      rc=$?
      rc=0
      stdout_lines=$(uci changes)
      changed=$(echo "${stdout_lines}" | wc -l)
      ;;
    set)
      [ $(uci get "${key}") = "${value}" ]
      changed=$?
      [ $changed != 0 ] && _uci "${command}" "${key}=${value}"
      ;;
    add_list)
      uci get "$key" 2>/dev/null |grep -q "${value}"
      changed=$?
      [ $changed != 0 ] && _uci "${command}" "${key}=${value}"
      ;;
esac

# if [ $changed -ne 0 ] && [ -n "$stdout_lines" ]
[ -z "$stdout_lines" ] && changed=0
# multiline stdout_lines breaks valid json output
[ -n "$stdout_lines" ] && stdout_lines=$(echo $stdout_lines | xargs)

if [ $changed -ne 0 ]
then
  echo -n "{\"changed\": true, \"msg\": \"ok\", \"stdout_lines\": \"${stdout_lines}\"}"
  uci commit
else
  echo -n "{\"changed\": false, \"msg\": \"ok\", \"stdout_lines\": \"${stdout_lines}\"}"
fi

exit $rc
